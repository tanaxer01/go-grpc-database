// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: monedas.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PreciosMonedasClient is the client API for PreciosMonedas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreciosMonedasClient interface {
	// Moneda
	Query(ctx context.Context, in *MonedaRequest, opts ...grpc.CallOption) (*MonedaResponse, error)
	Update(ctx context.Context, in *UpdateMonedaRequest, opts ...grpc.CallOption) (*UpdateMonedaResponse, error)
}

type preciosMonedasClient struct {
	cc grpc.ClientConnInterface
}

func NewPreciosMonedasClient(cc grpc.ClientConnInterface) PreciosMonedasClient {
	return &preciosMonedasClient{cc}
}

func (c *preciosMonedasClient) Query(ctx context.Context, in *MonedaRequest, opts ...grpc.CallOption) (*MonedaResponse, error) {
	out := new(MonedaResponse)
	err := c.cc.Invoke(ctx, "/monedas.PreciosMonedas/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preciosMonedasClient) Update(ctx context.Context, in *UpdateMonedaRequest, opts ...grpc.CallOption) (*UpdateMonedaResponse, error) {
	out := new(UpdateMonedaResponse)
	err := c.cc.Invoke(ctx, "/monedas.PreciosMonedas/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreciosMonedasServer is the server API for PreciosMonedas service.
// All implementations must embed UnimplementedPreciosMonedasServer
// for forward compatibility
type PreciosMonedasServer interface {
	// Moneda
	Query(context.Context, *MonedaRequest) (*MonedaResponse, error)
	Update(context.Context, *UpdateMonedaRequest) (*UpdateMonedaResponse, error)
	mustEmbedUnimplementedPreciosMonedasServer()
}

// UnimplementedPreciosMonedasServer must be embedded to have forward compatible implementations.
type UnimplementedPreciosMonedasServer struct {
}

func (UnimplementedPreciosMonedasServer) Query(context.Context, *MonedaRequest) (*MonedaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedPreciosMonedasServer) Update(context.Context, *UpdateMonedaRequest) (*UpdateMonedaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPreciosMonedasServer) mustEmbedUnimplementedPreciosMonedasServer() {}

// UnsafePreciosMonedasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreciosMonedasServer will
// result in compilation errors.
type UnsafePreciosMonedasServer interface {
	mustEmbedUnimplementedPreciosMonedasServer()
}

func RegisterPreciosMonedasServer(s grpc.ServiceRegistrar, srv PreciosMonedasServer) {
	s.RegisterService(&PreciosMonedas_ServiceDesc, srv)
}

func _PreciosMonedas_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonedaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreciosMonedasServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monedas.PreciosMonedas/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreciosMonedasServer).Query(ctx, req.(*MonedaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PreciosMonedas_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonedaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreciosMonedasServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monedas.PreciosMonedas/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreciosMonedasServer).Update(ctx, req.(*UpdateMonedaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PreciosMonedas_ServiceDesc is the grpc.ServiceDesc for PreciosMonedas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PreciosMonedas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monedas.PreciosMonedas",
	HandlerType: (*PreciosMonedasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _PreciosMonedas_Query_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PreciosMonedas_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monedas.proto",
}
